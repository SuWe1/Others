import java.util.concurrent.BrokenBarrierException;
import java.util.concurrent.CyclicBarrier;

public class UseCyclicBarrier {

	/**
	 * 每个写入线程执行完写数据操作之后，就在等待其他线程写入操作完毕。
　　当所有线程线程写入操作完毕之后，所有线程就继续进行后续的操作了
	 */
	public static void Common() {
		int N=4;
//		CyclicBarrier cyclicBarrier=new CyclicBarrier(N);
		
		
		//当四个线程都到达barrier状态后，会从四个线程中选择一个线程去执行Runnable。
		CyclicBarrier cyclicBarrier=new CyclicBarrier(N,new Runnable() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
				System.out.println("当前线程"+Thread.currentThread().getName());
			}
		});
		for (int i = 0; i < N; i++) {
			new Write(cyclicBarrier).start();
		}
		
		
		try {
            Thread.sleep(25000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
         
        System.out.println("CyclicBarrier重用");
         
        //CyclicBarrier重用
        for(int i=0;i<N;i++) {
            new Write(cyclicBarrier).start();
        }
	}

	static class Write extends Thread{
		private CyclicBarrier cyclicBarrier;
		public Write(CyclicBarrier cyclicBarrier) {
			super();
			this.cyclicBarrier = cyclicBarrier;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			super.run();
			System.out.println("线程"+Thread.currentThread().getName()+"正在写入数据...");
            try {
                Thread.sleep(5000);      //以睡眠来模拟写入数据操作
                System.out.println("线程"+Thread.currentThread().getName()+"写入数据完毕，等待其他线程写入完毕");
                cyclicBarrier.await();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }catch(BrokenBarrierException e){
                e.printStackTrace();
            }
            System.out.println("所有线程写入完毕，继续处理其他任务...");
		}
	}
	
	public static void main(String[] args) {
		Common();
	}
}
